#include <iostream>
#include <fstream>
#include <string>
#include <vector>
using namespace std;

void print(vector <double> x, vector <double> y) {
    cout << '\n';
    for (int i = 0; i < x.size(); i++) {
        if (x[i] >= 0) cout << " ";
        cout << x[i] << " ";
    }
    cout << '\n';
    for (int i = 0; i < y.size(); i++) {
        if (y[i] >= 0) cout << " ";
        cout << y[i] << " ";
    }
    cout << '\n';
}
double func(double x) {
    return (1 / (1 + 25 * pow(x, 2)));
}
double lagrange(vector<double>x, vector<double>y, double xx) {
    double yy = 0;
    for (int i = 0; i < x.size(); i++) {
        double p1 = 1, p2 = 1;
        for (int j = 0; j < x.size(); j++) {
            if (i == j) continue;
            p1 *= xx - x[j];
            p2 *= x[i] - x[j];
        }
        yy += y[i] * p1 / p2;
    }
    return yy;
}
vector<double> nods(int n) {
    const double PI = acos(-1.0);
    vector<double> x(n);
    for (int i = 0; i < n; i++) {
        x[i] = cos(PI * (2 * (i + 1) - 1) / (2 * n));
    }
    return x;
}
/*
vector<double> gauss(vector<vector<double>>& a) {
    int n = a.size();
    vector<double> x(n);
    for (int i = 0; i < n; ++i) {
        int max = i;
        for (int k = i + 1; k < n; ++k) {
            if (abs(a[k][i]) > abs(a[max][i])) {
                max = k;
            }
        }
        if (max != i) {
            swap(a[i], a[max]);
        }
    }
    for (int i = 0; i < n; i++) {
        for (int k = i + 1; k < n; k++) {
            double f = a[k][i] / a[i][i];
            for (int j = i; j < n + 1; j++) {
                a[k][j] -= f * a[i][j];
            }
        }
    }
    for (int i = n - 1; i >= 0; i--) {
        x[i] = a[i][n];
        for (int j = n - 1; j >= 0; j--) {
            if (j != i)
                x[i] -= a[i][j] * x[j];
        }
        x[i] /= a[i][i];
    }
    return x;
}
*/
vector<double> gauss(vector<vector<double>>& matrix) {
    int n = matrix.size();


    for (int i = 0; i < n; ++i) {
        int max_row = i;
        for (int k = i + 1; k < n; ++k) {
            if (abs(matrix[k][i]) > abs(matrix[max_row][i])) {
                max_row = k;
            }
        }
        if (max_row != i) {
            swap(matrix[i], matrix[max_row]);
        }
    }
    for (int i = 0; i < n; i++) {
        for (int k = i + 1; k < n; k++) {
            double factor = matrix[k][i] / matrix[i][i];
            for (int j = i; j < n + 1; j++) {
                matrix[k][j] -= factor * matrix[i][j];
            }

        }
    }
    vector<double> res(n);
    for (int i = n - 1; i >= 0; i--) {
        res[i] = matrix[i][n];
        for (int j = n - 1; j >= 0; j--) {
            if (j != i)
                res[i] -= matrix[i][j] * res[j];
        }
        res[i] /= matrix[i][i];
    }
    return res;
}


double Splain(double x, vector<double>s) {
    return s[0] + s[1] * x + s[2] * pow(x, 2) + s[3] * pow(x, 3);
}

vector<double> sx(double x, double y) {
    vector<double>a(5);
    a[0] = 1;
    a[1] = x;
    a[2] = pow(x, 2);
    a[3] = pow(x, 3);
    a[4] = y;
    return a;
}
vector<double> sx2(double x) {
    vector<double>a(5);
    a[0] = 0;
    a[1] = 0;
    a[2] = 2;
    a[3] = 6 * x;
    a[4] = 0;
    return a;
}
vector<double> s1(double x, double y) {
    vector<double>a(5);
    a[0] = 1;
    a[1] = x;
    a[2] = pow(x, 2);
    a[3] = pow(x, 3);
    a[4] = y;
    return a;
}
vector<double> s2(double x) {
    vector<double>a(5);
    a[0] = 0;
    a[1] = 1;
    a[2] = 2 * x;
    a[3] = 3 * pow(x, 2);
    a[4] = (-50 * x) / (1 + 25 * pow(x, 2));
    return a;
}

double S(vector<double> x, vector<double> y, int A, int B, int n, double xx) {
    double h = (double)(B - A) / (n - 1);

    vector<double> c(n + 1);
    vector<double>k(n + 1);
    k[1] = 0;
    c[1] = 0;
    for (int i = 2; i < n; i++) {
        double a = x[i] - x[i - 1];
        double b = x[i - 1] - x[i - 2];
        double r = 2 * (a + b) - b * c[i - 1];
        c[i] = a / r;
        k[i] = (3.0 * ((y[i] - y[i - 1]) / h - (y[i - 1] - y[i - 2]) / h) - h * k[i - 1]) / r;
    }

    c[n] = k[n];
    for (int i = n - 2; i >= 2; i--) {
        c[i] = k[i] - c[i] * c[i + 1];
    }

    int i = 0;
    while (xx >= x[i] && i != (n - 1)) {
        i++;
    }
    double j, a, b, q, r, p, d, p1, p2;
    j = i - 1;
    a = y[j];
    b = x[j];
    q = x[i] - b;
    r = xx - b;
    p = c[i];
    d = c[i + 1];
    b = ((y[i] - a) / q) - ((d + 2 * p) * q / 3.0);
    d = (d - p) / q * r;
    p1 = b + r * (2 * p + d);
    p2 = 2 * (p + d);
    p = a + r * (b + r * (p + d / 3.0));

    return p;
}

int main()
{
    setlocale(LC_ALL, "Russian");
    cout.precision(5);
    cout << fixed;
    int n = 11;
    vector<double>x(n);
    vector<double>y(n);
    vector<double>p(n);

    cout << "Выбранное n: " << n << '\n';

    double ii = -1;
    double step = (double)2 / (n - 1);
    for (int i = 0; i < n; i++) {
        x[i] = ii;
        y[i] = func(ii);
        ii += step;
        if (ii > 1)
            ii = 1;
    }
    cout << "№1\na)\nТаблица функции f(x)(с равноотстоящими узлами): \n";
    print(x, y);
    cout << "\nПолученные значения: \n";
    for (double ii = -1; ii <= 1; ii += step) {
        cout << ii << " " << to_string(lagrange(x, y, ii)) << '\n';
    }
    cout << "\nb): \n";
    x = nods(n);//получение чебышевских узлов
    for (int i = 0; i < n; i++)
        y[i] = func(x[i]);
    //print(x, y);
    cout << "\nПолученные значения: \n";
    for (double ii = -1; ii <= 1; ii += step) {
        cout << ii << " " << to_string(lagrange(x, y, ii)) << '\n';
    }

    //2

    n = 11;
    x.resize(n);
    y.resize(n);
    step = (double)2 / (n - 1);
    cout << "\n№2.1)\nЗначения сплайна для функции f(x): \n";
    ii = -1;
    for (int i = 0; i < n; i++) {
        x[i] = ii;
        y[i] = func(ii);
        ii += step;
        if (ii > 1)
            ii = 1;
    }
    print(x, y);
    cout << '\n';

    vector<vector<double>> b(4);
    for (int i = 0; i < n - 1; i++) {
        b[0] = s1(x[i], y[i]);
        b[1] = s2(x[i]);
        b[2] = s1(x[i + 1], y[i + 1]);
        b[3] = s2(x[i + 1]);
        vector<double> t = gauss(b);

        for (double j = x[i]; j < x[i + 1]; j += 0.1)
            cout << to_string(j) << " " << to_string(Splain(j, t)) << endl;

        if (i == n - 2)
            cout << "1,00000" << " " << to_string(Splain(1, t)) << '\n';
    }

    /*
    cout << "\n№2.2)\nТаблица функции f(x): \n";
    n = 4;
    step = 0.5;
    x = { 2, 3, 5, 7 };
    y = { 4, -2, 6, -3 };
    print(x, y);
    cout << "\nПолученные значения сплайна в узловых точках: \n";
    for (int i = 0; i < n - 1; i++) {
        vector<vector<double>> a(n);
        a[0] = sx(x[i], y[i]);
        a[1] = sx2(x[i]);
        a[2] = sx(x[i + 1], y[i + 1]);
        a[3] = sx2(x[i + 1]);
        vector<double> t = gauss(a);

        for (double j = x[i]; j < x[i + 1]; j += step)
            cout << to_string(j) << " " << to_string(Splain(j, t)) << '\n';

        if (i == n - 2)
            cout << "7,00000" << " " << to_string(Splain(7, t)) << '\n';
    }
    */
    cout << "\n№2.2: \n";
    vector<double> xx = { 2, 3, 5, 7 };
    vector<double> yy = { 4, -2, 6, -3 };

    cout << "\nТаблица функции f(x): \n";
    print(xx, yy);
    cout << "\nПолученные значения: \n";
    for (double i = 2; i <= 7; i += 0.5) {
        cout << to_string(i) << " " << to_string(S(xx, yy, 2, 7, 4, i)) << '\n';

    }
    cout << to_string(7) << " " << to_string(S(xx, yy, 2, 7, 4, 7)) << '\n';

}

//2
#include <iostream>
#include <cmath>
using namespace std;

int sum1(double x) {
    double sum2 = 0;
    int n = 1;
    double sum = 1 / (n * (n + x));
    while ((sum - sum2) > (0.5 * pow(10, -8))) {
        n++;
        sum2 = sum;
        sum += 1 / (n * (n + x));
    }
    cout << "Сумма ряда f(x): " << sum << " ";
    return n;
}

int sum2(double x) {
    double sum2 = 0;
    int n = 1;
    double sum = (1 - x) / (n * (n + x) * (n + 1));
    while ((sum - sum2) > (0.5 * pow(10, -8))) {
        n++;
        sum2 = sum;
        sum += (1-x) / (n * (n + x) * (n + 1));
    }
    cout << "Сумма ряда f(x)-f(1): " << sum << " ";
    return n;
}

int sum3() {
    double sum2 = 0;
    int n = 1;
    double sum = 1 / n - 1 / (n + 1);
    while ((sum - sum2) > (0.5 * pow(10, -8))) {
        n++;
        sum2 = sum;
        sum += 1 / n - 1 / (n + 1);
    }
    cout << "Сумма ряда при использовании 1/k-1/(k+1) (при x=1): " << sum << " ";
    return n;
}

int main()
{
    setlocale(LC_ALL, "Russian");
    for (double x = 0; x <= 1.0; x += 0.1) {
        cout << "x=" << x << " - ";
        cout << " n: " << sum1(x) << '\n';
    }
    cout << '\n';
    for (double x = 0; x <= 1.0; x += 0.1) {
        cout << "x=" << x << " - ";
        cout << " n: " << sum2(x) << '\n';
    }
    cout << "n: " << sum3() << endl;
}

//3
#include <iostream>
using namespace std;

double s(double x) {
    //long double error = 3*pow(10,-8);
    int k = 1;
    double sum1 = 1/(sqrt((pow(k,3))+x))- 1 / (sqrt((pow(k, 3)) - x));
    double sum2 = 0;
    while (sum1-sum2> 3 * pow(10, -8)) {//если член оказывается меньше заданной точности, то выход из цикла
        k++;
        sum2 = sum1;
        sum1+= 1 / (sqrt((pow(k, 3)) + x)) - 1 / (sqrt((pow(k, 3)) - x));
    }

    cout << k << " ";
    return sum1;
}
double s1(double x) {
    //long double error = 3*pow(10,-8);
    int k = 1;
    double sum1 = 1 / (sqrt((pow(k, 3)) + x));
    double sum2 = 0;
    while (sum1 - sum2 > 3 * pow(10, -8)) {//если член оказывается меньше заданной точности, то выход из цикла
        k++;
        sum2 = sum1;
        sum1 += 1 / (sqrt((pow(k, 3)) + x));
    }

    cout << k << " ";
    return sum1;
}
double s2(double x) {
    //long double error = 3*pow(10,-8);
    int k = 1;
    double sum1 = 1 / (sqrt((pow(k, 3)) - x));
    double sum2 = 0;
    while (sum1 - sum2 > 3 * pow(10, -8)) {//если член оказывается меньше заданной точности, то выход из цикла
        k++;
        sum2 = sum1;
        sum1 += 1 / (sqrt((pow(k, 3)) - x));
    }

    cout << k << " ";
    return sum1;
}
double s3(double x) {
    //long double error = 3*pow(10,-8);
    int k = 1;
    double sum1 = (sqrt(pow(k, 3) - x) - sqrt(pow(k, 3) + x)) / (sqrt((pow(k, 3) + x) * (pow(k, 3) - x)));
    double sum2 = 0;
    while (sum1 - sum2 > 3 * pow(10, -8)) {//если член оказывается меньше заданной точности, то выход из цикла
        k++;
        sum2 = sum1;
        sum1 += (sqrt(pow(k, 3) - x) - sqrt(pow(k, 3) + x)) / (sqrt((pow(k, 3) + x) * (pow(k, 3) - x)));
    }

    cout << k << " ";
    return sum1;
}
int main()
{
    setlocale(LC_ALL, "Ru");
    for (double x = -0.9; x <= 0.9; x += 0.1) {
        cout << x<< " " <<  s(x) << endl;
    }
    cout << "A (ряд сходится, если существует сумма ряда)" << endl;
    for (double x = -0.9; x <= 0.9; x += 0.1) {
        cout << x << " " << s1(x) << endl;
    }
    for (double x = -0.9; x <= 0.9; x += 0.1) {
        cout << x << " " << s2(x) << endl;
    }
    cout << "В: 103575 миллисекунд" << endl;
    cout << "Г и Д" << endl;
    cout << "0.5: " << " " << s3(0.5) << endl;
    cout << "0.999999999" << " " << s3(0.999999999) << endl;


#include <iostream>
#include <cmath>
using namespace std;
#define M_PI acos(-1)
#include <math.h>
const double eps = 1e-10;
double sum1() {
    double sum2 = 0;
    int n = 1;
    double sum = 1/(pow(n,2)+1);
    while ((sum - sum2) > eps) {
        n++;
        sum2 = sum;
        sum += 1 / (pow(n, 2) + 1);
    }
    cout << n << endl;
    return sum;
}

double sum2() {
    double sum2 = 0;
    int n = 1;
    double sum = pow(M_PI, 2) / 6 - pow(M_PI, 4) / 90 + 1 / (pow(n, 6) + pow(n, 4));
    while ((sum - sum2) > eps) {
        n++;
        sum2 = sum;
        sum += 1 / (pow(n, 6) + pow(n, 4));


    }
    cout << n << endl;
    return sum;
}



int main()
{
    setlocale(LC_ALL, "Russian");
    cout << sum1() << endl;
    cout << sum2();
}

}

#include <iostream>
 #include <stdio.h>
#include <stdlib.h>
using namespace std;
//
// Транспонирование матрицы
double** Transpone(double** mas, int rows, int cols)
{
    double** rez;
    rez = (double**)malloc(cols * sizeof(double*));
    for (int i = 0; i < cols; i++)
    {
        rez[i] = (double*)malloc(rows * sizeof(double));
        for (int j = 0; j < rows; j++)
            rez[i][j] = mas[j][i];
    }
    return rez;
}

// Получение матрицы без i-й строки и j-го столбца
// (функция нужна для вычисления определителя и миноров)
double** GetMatr(double** mas, int rows, int cols, int row, int col) {
    int di, dj;
    double** p = (double**)malloc((rows - 1) * sizeof(double*));
    di = 0;
    for (int i = 0; i < rows - 1; i++) { // проверка индекса строки
        if (i == row)  // строка совпала с вычеркиваемой
            di = 1;    // - дальше индексы на 1 больше
        dj = 0;
        p[i] = (double*)malloc((cols - 1) * sizeof(double));
        for (int j = 0; j < cols - 1; j++) { // проверка индекса столбца
            if (j == col)  // столбец совпал с вычеркиваемым
                dj = 1;    // - дальше индексы на 1 больше
            p[i][j] = mas[i + di][j + dj];
        }
    }
    return p;
}

// Рекурсивное вычисление определителя
double Determinant(double** mas, int m) {
    int k;
    double** p = 0;
    double d = 0;
    k = 1; //(-1) в степени i
    if (m < 1) { printf("Определитель вычислить невозможно!"); return 0; }
    if (m == 1) { d = mas[0][0]; return(d); }
    if (m == 2) { d = mas[0][0] * mas[1][1] - (mas[1][0] * mas[0][1]); return(d); }
    if (m > 2) {
        for (int i = 0; i < m; i++) {
            p = GetMatr(mas, m, m, i, 0);
            d = d + k * mas[i][0] * Determinant(p, m - 1);
            k = -k;
        }
    }
    return(d);
}

// Обратная матрица
double** Mreverse(double** mas, int m)
{
    double** rez = (double**)malloc(m * sizeof(double*));
    double det = Determinant(mas, m); // находим определитель исходной матрицы
    for (int i = 0; i < m; i++)
    {
        rez[i] = (double*)malloc(m * sizeof(double));
        for (int j = 0; j < m; j++)
        {
            rez[i][j] = Determinant(GetMatr(mas, m, m, i, j), m - 1);
            if ((i + j) % 2 == 1)       // если сумма индексов строки и столбца нечетная
                rez[i][j] = -rez[i][j];    // меняем знак минора
            rez[i][j] = rez[i][j] / det;
        }
    }
    return Transpone(rez, m, m);
}
//
double* gauss(double** a, double* y, int n)
{
	double* x, max;
	int k, ind;
	x = new double[n];
	k = 0;
	const long double eps = 0.00001;
	//поиск строки с макс первым элементом
	while (k < n) {
		max = abs(a[k][k]);
		ind = k;
		for (int i = k + 1; i < n; i++) {
			if (abs(a[i][k]) > max)
			{
				max = abs(a[i][k]);
				ind = i;
			}
		}
		//перестановка строк
		for (int j = 0; j < n; j++)
		{
			double temp = a[k][j];
			a[k][j] = a[ind][j];
			a[ind][j] = temp;
		}
		double temp = y[k];
		y[k] = y[ind];
		y[ind] = temp;
		//нормализация
		for (int i = k; i < n; i++)
		{
			double temp = a[i][k];
			if (abs(temp) <= eps) continue;
			for (int j = k; j < n; j++)
				a[i][j] = a[i][j] / temp;
			y[i] = y[i] / temp;
			if (i == k) continue;
			for (int j = 0; j < n; j++)
				a[i][j] = a[i][j] - a[k][j];
			y[i] = y[i] - y[k];
		}
		k++;
	}
	//подстановка полученных значений в уравнения
	for (k = n - 1; k >= 0; k--)
	{
		x[k] = y[k];
		for (int i = 0; i < k; i++)
			y[i] = y[i] - a[i][k] * x[k];
	}
	return x;
}

// Функция для копирования двумерного массива (матрицы) типа double
double** copyMatrix(double**matr) {
	// Выделяем память для новой матрицы
	double** matr2 = new double* [3];
	for (int i = 0; i < 3; ++i) {
		matr2[i] = new double[3];
		// Копируем элементы из исходной матрицы в новую
		for (int j = 0; j < 3; ++j) {
			matr2[i][j] = matr[i][j];
		}
	}

	return matr2;
}
int main() {
	setlocale(LC_ALL, "Ru");
	double** matr = new double*[3];
	double* b = new double[3];
	double* x = new double[3];
	cout.precision(11);
	for (int i = 0; i < 3; i++) {
		matr[i] = new double [3];
		for (int j = 0; j < 3; j++)
			cin >> matr[i][j];
	}
	double** matr2 = copyMatrix(matr);
	double** matr3 = copyMatrix(matr);

	b[0] = erf(0.80);
	b[1] = erf(0.90);
	b[2] = erf(1.10);
	x = gauss(matr, b, 3);
	
	cout << "значения вектора x: ";
	for (int i = 0; i < 3; i++)
		cout  << x[i] << " ";
	cout << endl;
	cout << endl;
	//обусловленность(надо комментировать вызов метода гаусса чтобы максимумы были найдены правильно
	//cout << "обусловленность: " << endl;
	double max = 0;
	for (int i = 0; i < 3; i++)
		max += matr2[i][0];
	int maxj = 0;
	for (int j = 0; j < 3; j++) {
		double sum = 0;
		for (int i = 0; i < 3; i++)
		{
			sum += abs(matr2[i][j]);
		}
		if (sum > max) {
			max = sum;
			maxj = j;
		}
	}
	cout <<"норма изначальной матрицы: " << max << endl;
	double** mas_reverse = Mreverse(matr2, 3);
	cout << "обратная матрица: " << endl;
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++)
			cout << mas_reverse[i][j] << " ";
		cout << endl;
	}
	double max2 = 0;
	for (int i = 0; i < 3; i++)
		max2 += mas_reverse[i][0];
	
	int maxj2 = 0;
	for (int j = 0; j < 3; j++) {
		double sum = 0;
		for (int i = 0; i < 3; i++)
		{
			sum += abs(mas_reverse[i][j]);
		}
		if (sum > max2) {
			max2 = sum;
			maxj2 = j;
		}
	}
	cout <<"норма обратной матрицы: " << max2 << endl;
	double condA = max * max2;
	cout <<"обусловленность матрицы: " << condA << endl;
	cout << endl;
	////невязка, вычисление перемножения матрицы а на вектор x
	/*for (int i = 0; i < 3; i++)
		cout << x[i] << endl;*/ 
	b[0] = erf(0.80);
	b[1] = erf(0.90);
	b[2] = erf(1.10);
	cout << "Ax: ";
	double* n = new double[3];
	for (int i = 0; i < 3; i++) {
		n[i] = 0;
		for (int j = 0; j < 3; j++) {
			n[i] += matr3[i][j] * x[j];
			
		}cout << n[i] << " ";
	}
	cout << endl;
	//cout << b[0] << " " << b[1] << " " << b[2] << endl;
	cout << "вектор невязки: ";
	for (int i = 0; i < 3; i++) {
		n[i] = n[i] - b[i];
		cout << n[i] << " ";
	}
	cout << endl;
	double norm = 0;
	for (int i = 0; i < 3; i++)
		norm += pow(n[i], 2);
	cout <<"невязка: " <<fixed << sqrt(norm) << endl;
	//напечатала x1+x2+x3 и сравнила с erf
	cout << endl;
	double resX = 0;
	for (int i = 0; i < 3; i++)
		resX += x[i];
	cout << "x1+x2+x3: " << resX << endl;
	cout << "erf(1.0): " << erf(1.0) << endl;
}

//ЛАБА
4.43 -7.21 8.05 1.23 -2.56
-1.29 6.47 2.96 3.22 6.12
6.12 8.31 9.41 1.78 -2.88
-2.57 6.93 -3.74 7.41 5.55
1.46 3.62 7.83 6.25 -2.35

2.34 -4.21 -11.61
8.04 5.22 0.27
3.92 -7.99 8.37

#include <iostream>
using namespace std;
// Функция для копирования двумерного массива (матрицы) типа double
double** copyMatrix(double**matr, int n) {
	// Выделяем память для новой матрицы
	double** matr2 = new double* [n];
	for (int i = 0; i < n; ++i) {
		matr2[i] = new double[n];
		// Копируем элементы из исходной матрицы в новую
		for (int j = 0; j < n; ++j) {
			matr2[i][j] = matr[i][j];
		}
	}

	return matr2;
}
double* gauss(double** a, double* y, int n)
{
	double* x, max;
	int k, ind;
	x = new double[n];
	k = 0;
	const long double eps = 0.00001;
	//поиск строки с макс первым элементом
	while (k < n) {
		max = abs(a[k][k]);
		ind = k;
		for (int i = k + 1; i < n; i++) {
			if (abs(a[i][k]) > max)
			{
				max = abs(a[i][k]);
				ind = i;
			}
		}
		//перестановка строк
		for (int j = 0; j < n; j++)
		{
			double temp = a[k][j];
			a[k][j] = a[ind][j];
			a[ind][j] = temp;
		}
		double temp = y[k];
		y[k] = y[ind];
		y[ind] = temp;
		//нормализация
		for (int i = k; i < n; i++)
		{
			double temp = a[i][k];
			if (abs(temp) <= eps) continue;
			for (int j = k; j < n; j++)
				a[i][j] = a[i][j] / temp;
			y[i] = y[i] / temp;
			if (i == k) continue;
			for (int j = 0; j < n; j++)
				a[i][j] = a[i][j] - a[k][j];
			y[i] = y[i] - y[k];
		}
		k++;
	}
	//подстановка полученных значений в уравнения
	for (k = n - 1; k >= 0; k--)
	{
		x[k] = y[k];
		for (int i = 0; i < k; i++)
			y[i] = y[i] - a[i][k] * x[k];
	}
	return x;
}
int main(){
	setlocale(LC_ALL, "Ru");
	cout.precision(11);
	double** a = new double* [2];
	double* b = new double[2];
	double* x;
	//for (int i = 0; i < 2; i++) {
	//	a[i] = new double[2];
	//	for (int j = 0; j < 2; j++)
	//		cin >> a[i][j];
	//}
	//b[0] = 1;
	//b[1] = 4;
	//double** a2 = copyMatrix(a, 2);
	//x = gauss(a, b, 2);
	//b[0] = 1;
	//b[1] = 4;
	//cout << "x: ";
	//for (int i = 0; i < 2; i++)
	//	cout << x[i] << " ";
	//cout << endl;
	//cout << "Ax: ";
	//double* n = new double[2];
	//for (int i = 0; i < 2; i++) {
	//	n[i] = 0;
	//	for (int j = 0; j < 2; j++) {
	//		n[i] += a2[i][j] * x[j];
	//			
	//	}cout << n[i] << " ";
	//}
	//cout << endl;
	////cout << b[0] << " " << b[1] << " " << b[2] << endl;
	//cout << "вектор невязки: ";
	//for (int i = 0; i < 2; i++) {
	//	n[i] = n[i] - b[i];
	//	cout << n[i] << " ";
	//}
	//cout << endl;
	double** a3 = new double* [3];
	for (int i = 0; i < 3; i++) {
		a3[i] = new double[3];
		for (int j = 0; j < 3; j++)
			cin >> a3[i][j];
	}
	double** a4 = copyMatrix(a3, 3);
	b[0] = 14.41;
	b[1] = -6.44;
	b[2] = 55.56;
	x = gauss(a3, b, 3);
	for (int i = 0; i < 3; i++)
		cout << x[i] << " ";
	cout << endl;
	cout << "Ax: ";
	double* n2 = new double[3];
	b[0] = 14.41;
	b[1] = -6.44;
	b[2] = 55.56;
	for (int i = 0; i < 3; i++) {
		n2[i] = 0;
		for (int j = 0; j < 3; j++) {
			n2[i] += a4[i][j] * x[j];

		}cout << n2[i] << " ";
	}
	cout << endl;
	cout << "вектор невязки: ";
	for (int i = 0; i < 3; i++) {
		n2[i] = n2[i] - b[i];
		cout <<fixed << n2[i] << " ";
	}
	cout << endl;
	double** a5 = new double* [5];
	for (int i = 0; i < 5; i++) {
		a5[i] = new double[5];
		for (int j = 0; j < 5; j++)
			cin >> a5[i][j];
	}
	double** a6 = copyMatrix(a5, 5);
	b[0] = 2.62;
	b[1] = -3.97;
	b[2] = -9.12;
	b[3] = 8.11;
	b[4] = 7.23;
	x = gauss(a5, b, 5);
	for (int i = 0; i < 5; i++)
		cout << x[i] << " ";
	cout << endl;
	cout << "Ax: ";
	double* n3 = new double[5];
	b[0] = 2.62;
	b[1] = -3.97;
	b[2] = -9.12;
	b[3] = 8.11;
	b[4] = 7.23;
	for (int i = 0; i < 5; i++) {
		n3[i] = 0;
		for (int j = 0; j < 5; j++) {
			n3[i] += a6[i][j] * x[j];

		}cout << n3[i] << " ";
	}
	cout << endl;
	cout << "вектор невязки: ";
	for (int i = 0; i < 5; i++) {
		n3[i] = n3[i] - b[i];
		cout << fixed << n3[i] << " ";
	}
}


///////////////////////////////////////////
//#include <iostream>
//using namespace std;
//double* gauss(double** a, double* y, int n)
//{
//	double* x, max;
//	int k, ind;
//	x = new double[n];
//	k = 0;
//	const long double eps = 0.00001;
//	//поиск строки с макс первым элементом
//	while (k < n) {
//		max = abs(a[k][k]);
//		ind = k;
//		for (int i = k + 1; i < n; i++) {
//			if (abs(a[i][k]) > max)
//			{
//				max = abs(a[i][k]);
//				ind = i;
//			}
//		}
//		//перестановка строк
//		for (int j = 0; j < n; j++)
//		{
//			double temp = a[k][j];
//			a[k][j] = a[ind][j];
//			a[ind][j] = temp;
//		}
//		double temp = y[k];
//		y[k] = y[ind];
//		y[ind] = temp;
//		//нормализация
//		for (int i = k; i < n; i++)
//		{
//			double temp = a[i][k];
//			if (abs(temp) <= eps) continue;
//			for (int j = k; j < n; j++)
//				a[i][j] = a[i][j] / temp;
//			y[i] = y[i] / temp;
//			if (i == k) continue;
//			for (int j = 0; j < n; j++)
//				a[i][j] = a[i][j] - a[k][j];
//			y[i] = y[i] - y[k];
//		}
//		k++;
//	}
//	//подстановка полученных значений в уравнения
//	for (k = n - 1; k >= 0; k--)
//	{
//		x[k] = y[k];
//		for (int i = 0; i < k; i++)
//			y[i] = y[i] - a[i][k] * x[k];
//	}
//	return x;
//}
//int main() {
//	double** a = new double* [3];
//	double* b = new double[3];
//	double* x;
//	for (int i = 0; i < 3; i++) {
//		a[i] = new double[3];
//		for (int j = 0; j < 3; j++)
//			cin >> a[i][j];
//	}
//	b[0] = 0.1;
//	b[1] = 0.3;
//	b[2] = 0.5;
//	x = gauss(a, b, 3);
//	for (int i = 0; i < 3; i++) {
//		for (int j = 0; j < 3; j++)
//			cout << a[i][j] << " ";
//		cout << endl;
//	}
//	for (int i = 0; i < 3; i++)
//		cout << x[i] << " ";
//			
//}

//////////////////////////////////////////////
#include <iostream>
 #include <stdio.h>
#include <stdlib.h>
using namespace std;

// 
//double** inverseMatrix(double** matrix, int n) {
//	// Создание расширенной матрицы [matrix | identity]
//	double** augmentedMatrix = new double* [n];
//	for (int i = 0; i < n; ++i) {
//		augmentedMatrix[i] = new double[2 * n];
//		for (int j = 0; j < n; ++j) {
//			augmentedMatrix[i][j] = matrix[i][j];
//		}
//		// Создание единичной матрицы
//		for (int j = n; j < 2 * n; ++j) {
//			if (i == (j - n)) {
//				augmentedMatrix[i][j] = 1.0;
//			}
//			else {
//				augmentedMatrix[i][j] = 0.0;
//			}
//		}
//	}
//
//	// Приведение к ступенчатому виду (прямой ход)
//	for (int i = 0; i < n; ++i) {
//		// Поиск максимального элемента в столбце i
//		int maxRow = i;
//		for (int k = i + 1; k < n; ++k) {
//			if (fabs(augmentedMatrix[k][i]) > fabs(augmentedMatrix[maxRow][i])) {
//				maxRow = k;
//			}
//		}
//
//		// Перестановка строк, если найден больший элемент
//		if (maxRow != i) {
//			swap(augmentedMatrix[i], augmentedMatrix[maxRow]);
//		}
//
//		// Нормализация строки
//		double pivot = augmentedMatrix[i][i];
//		for (int j = 0; j < 2 * n; ++j) {
//			augmentedMatrix[i][j] /= pivot;
//		}
//
//		// Обнуление остальных строк
//		for (int k = 0; k < n; ++k) {
//			if (k != i) {
//				double factor = augmentedMatrix[k][i];
//				for (int j = 0; j < 2 * n; ++j) {
//					augmentedMatrix[k][j] -= factor * augmentedMatrix[i][j];
//				}
//			}
//		}
//	}
//
//	// Извлечение обратной матрицы
//	double** inverse = new double* [n];
//	for (int i = 0; i < n; ++i) {
//		inverse[i] = new double[n];
//		for (int j = 0; j < n; ++j) {
//			inverse[i][j] = augmentedMatrix[i][j + n];
//		}
//	}
//
//	return inverse;
//}
////
//double* gauss(double** a, double* y, int n)
//{
//	double* x, max;
//	int k, ind;
//	x = new double[n];
//	k = 0;
//	const long double eps = 0.00001;
//	//поиск строки с макс первым элементом
//	while (k < n) {
//		max = abs(a[k][k]);
//		ind = k;
//		for (int i = k + 1; i < n; i++) {
//			if (abs(a[i][k]) > max)
//			{
//				max = abs(a[i][k]);
//				ind = i;
//			}
//		}
//		//перестановка строк
//		for (int j = 0; j < n; j++)
//		{
//			double temp = a[k][j];
//			a[k][j] = a[ind][j];
//			a[ind][j] = temp;
//		}
//		double temp = y[k];
//		y[k] = y[ind];
//		y[ind] = temp;
//		//нормализация
//		for (int i = k; i < n; i++)
//		{
//			double temp = a[i][k];
//			if (abs(temp) <= eps) continue;
//			for (int j = k; j < n; j++)
//				a[i][j] = a[i][j] / temp;
//			y[i] = y[i] / temp;
//			if (i == k) continue;
//			for (int j = 0; j < n; j++)
//				a[i][j] = a[i][j] - a[k][j];
//			y[i] = y[i] - y[k];
//		}
//		k++;
//	}
//	//подстановка полученных значений в уравнения
//	for (k = n - 1; k >= 0; k--)
//	{
//		x[k] = y[k];
//		for (int i = 0; i < k; i++)
//			y[i] = y[i] - a[i][k] * x[k];
//	}
//	return x;
//}
//
//// Функция для копирования двумерного массива (матрицы) типа double
//double** copyMatrix(double**matr) {
//	// Выделяем память для новой матрицы
//	double** matr2 = new double* [3];
//	for (int i = 0; i < 3; ++i) {
//		matr2[i] = new double[3];
//		// Копируем элементы из исходной матрицы в новую
//		for (int j = 0; j < 3; ++j) {
//			matr2[i][j] = matr[i][j];
//		}
//	}
//
//	return matr2;
//}
//int main() {
//	setlocale(LC_ALL, "Ru");
//	double** matr = new double*[3];
//	double* b = new double[3];
//	double* x = new double[3];
//	cout.precision(11);
//	for (int i = 0; i < 3; i++) {
//		matr[i] = new double [3];
//		for (int j = 0; j < 3; j++)
//			cin >> matr[i][j];
//	}
//	double** matr2 = copyMatrix(matr);
//	double** matr3 = copyMatrix(matr);
//
//	b[0] = erf(0.80);
//	b[1] = erf(0.90);
//	b[2] = erf(1.10);
//	x = gauss(matr, b, 3);
//	
//	cout << "значения вектора x: ";
//	for (int i = 0; i < 3; i++)
//		cout  << x[i] << " ";
//	cout << endl;
//	cout << endl;
//	//обусловленность(надо комментировать вызов метода гаусса чтобы максимумы были найдены правильно
//	//cout << "обусловленность: " << endl;
//	double max = 0;
//	for (int i = 0; i < 3; i++)
//		max += matr2[i][0];
//	int maxj = 0;
//	for (int j = 0; j < 3; j++) {
//		double sum = 0;
//		for (int i = 0; i < 3; i++)
//		{
//			sum += abs(matr2[i][j]);
//		}
//		if (sum > max) {
//			max = sum;
//			maxj = j;
//		}
//	}
//	cout <<"норма изначальной матрицы: " << max << endl;
//	double** A_inv = new double* [3];
//	double** mas_reverse = inverseMatrix(matr2, 3);
//	cout << "обратная матрица: " << endl;
//	for (int i = 0; i < 3; i++) {
//		for (int j = 0; j < 3; j++)
//			cout << mas_reverse[i][j] << " ";
//		cout << endl;
//	}
//	double max2 = 0;
//	for (int i = 0; i < 3; i++)
//		max2 += mas_reverse[i][0];
//	
//	int maxj2 = 0;
//	for (int j = 0; j < 3; j++) {
//		double sum = 0;
//		for (int i = 0; i < 3; i++)
//		{
//			sum += abs(mas_reverse[i][j]);
//		}
//		if (sum > max2) {
//			max2 = sum;
//			maxj2 = j;
//		}
//	}
//	cout <<"норма обратной матрицы: " << max2 << endl;
//	double condA = max * max2;
//	cout <<"обусловленность матрицы: " << condA << endl;
//	cout << endl;
//	////невязка, вычисление перемножения матрицы а на вектор x
//	/*for (int i = 0; i < 3; i++)
//		cout << x[i] << endl;*/ 
//	b[0] = erf(0.80);
//	b[1] = erf(0.90);
//	b[2] = erf(1.10);
//	cout << "Ax: ";
//	double* n = new double[3];
//	for (int i = 0; i < 3; i++) {
//		n[i] = 0;
//		for (int j = 0; j < 3; j++) {
//			n[i] += matr3[i][j] * x[j];
//			
//		}cout << n[i] << " ";
//	}
//	cout << endl;
//	//cout << b[0] << " " << b[1] << " " << b[2] << endl;
//	cout << "вектор невязки: ";
//	for (int i = 0; i < 3; i++) {
//		n[i] = n[i] - b[i];
//		cout << n[i] << " ";
//	}
//	cout << endl;
//	double norm = 0;
//	for (int i = 0; i < 3; i++)
//		norm += pow(n[i], 2);
//	cout <<"невязка: " <<fixed << sqrt(norm) << endl;
//	//напечатала x1+x2+x3 и сравнила с erf
//	cout << endl;
//	double resX = 0;
//	for (int i = 0; i < 3; i++)
//		resX += x[i];
//	cout << "x1+x2+x3: " << resX << endl;
//	cout << "erf(1.0): " << erf(1.0) << endl;




#include <iostream>
using namespace std;
double* Jakobi(double** a, double* b, int n) {
    setlocale(LC_ALL, "Ru");
    double* x = new double[n];
    double e = 0.001;
    double max = 0;
    for (int i = 0; i < n; i++)
        x[i] = 0;	
    for (int i = 0; i < n; i++) {
        double sm = 0;
        for (int j = 0; j < n; j++) {
            if (i == j)continue;
            sm += abs(a[i][j]);
	}
        if (sm > abs(a[i][i]))
            cout << "система не в каноническом виде\n";
    }
    double* p = new double[n];
    int k = 0;
    double** copyA = new double* [n];
    for (int i = 0; i < n; i++) {
        copyA[i] = new double[n];
        for (int j = 0; j < n; j++)
            copyA[i][j] = a[i][j];
    }
    double* copyB = new double[n];
    for (int i = 0; i < n; i++)
        copyB[i] = b[i];
    int i = 1;
    do {
        /*for (int i = 0; i < n; i++)
            p[i] = x[i];*/
        double* x_new = new double[n];
        for (int i = 0; i < n; i++) {
            double s = 0;
            for (int j = 0; j < n; j++) {
                if (j == i) continue;
                else s+= a[i][j] * x[j];
            }
            x_new[i] = (1 / a[i][i]) * (b[i] - s);
        }
        /*for (int i = 0; i < n; i++)
            cout << x_new[i] << " ";
        cout << endl;
        cout << endl;*/

        for (int i = 0; i < n; i++) {
            max = abs(x_new[i] - x[i]);
            if (abs(x_new[i] - x[i]) > max)
                max = abs(x_new[i] - x[i]);
        }
        for (int i = 0; i < n; i++)
            x[i] = x_new[i];
        //for (int i = 0; i < n; i++)
        //    cout << x[i] << " ";
        //cout << endl;
        //cout << endl;
        double* nv = new double[n];
        for (int i = 0; i < n; i++) {
        	nv[i] = 0;
        	for (int j = 0; j < n; j++) {
        		nv[i] += a[i][j] * x[j];
        			
        	}//cout << n[i] << " ";
        }
        //cout << "вектор невязки: ";
        for (int i = 0; i < n; i++) {
        	nv[i] = b[i] - nv[i];
        	//cout << nv[i] << " ";
        }
        //cout << endl;
        double norm = 0;
        for (int i = 0; i < 3; i++)
        	norm += pow(nv[i], 2);
        cout <<"итерация "<<i<<" невязка: " <<fixed << sqrt(norm) << endl;
        //cout << endl;
        k++;
        i++;
    } while (max>e);
    return x;
}
double* Zeidel(double** a, double* b, int n) {
    setlocale(LC_ALL, "Ru");
    double* x = new double[n];
    double e = 0.001;
    double max = 0;
    for (int i = 0; i < n; i++)
        x[i] = 0;
    double* p = new double[n];
    int k = 0;
    double** copyA = new double* [n];
    for (int i = 0; i < n; i++) {
        copyA[i] = new double[n];
        for (int j = 0; j < n; j++)
            copyA[i][j] = a[i][j];
    }
    double* copyB = new double[n];
    for (int i = 0; i < n; i++)
        copyB[i] = b[i];
    int i = 1;
    do {
        /*for (int i = 0; i < n; i++)
            p[i] = x[i];*/
        double* x_new = new double[n];
        for (int i = 0; i < n; i++) {
            double s = 0;
            for (int j = 0; j < n; j++) {
                if (j == i) continue;
                if (i > j) s += a[i][j] * x_new[j];
                if (j > i) s += a[i][j] * x[j];
            }
            x_new[i] = (1 / a[i][i]) * (b[i] - s);
        }
        /*for (int i = 0; i < n; i++)
            cout << x_new[i] << " ";
        cout << endl;
        cout << endl;*/

        for (int i = 0; i < n; i++) {
            max = abs(x_new[i] - x[i]);
            if (abs(x_new[i] - x[i]) > max)
                max = abs(x_new[i] - x[i]);
        }
        for (int i = 0; i < n; i++)
            x[i] = x_new[i];
        //for (int i = 0; i < n; i++)
        //    cout << x[i] << " ";
        //cout << endl;
        //cout << endl;
        double* nv = new double[n];
        for (int i = 0; i < n; i++) {
            nv[i] = 0;
            for (int j = 0; j < n; j++) {
                nv[i] += a[i][j] * x[j];

            }//cout << n[i] << " ";
        }
        //cout << "вектор невязки: ";
        for (int i = 0; i < n; i++) {
            nv[i] = b[i] - nv[i];
            //cout << nv[i] << " ";
        }
        //cout << endl;
        double norm = 0;
        for (int i = 0; i < 3; i++)
            norm += pow(nv[i], 2);
        cout << "итерация " << i << " невязка: " << fixed << sqrt(norm) << endl;
        //cout << endl;
        k++;
        i++;
    } while (max > e);
    return x;
}
int main()
{
    setlocale(LC_ALL, "Ru");
    int n;
    cin >> n;
    double** a = new double* [n];
    for (int i = 0; i < n; i++) {
        a[i] = new double[n];
        for (int j = 0; j < n; j++)
            cin >> a[i][j];
    }
    double* b = new double[4];
    b[0] = 14.78;
    b[1] = -12.14;
    b[2] = -11.65;
    b[3] = 4.26;
    cout << "Якоби: " << endl;
    double* x = Jakobi(a, b, n);
    cout << "x: ";
    for (int i = 0; i < n; i++)
        cout << x[i] << " ";
    cout << endl;
    cout << endl;
    cout << "Зейдель: " << endl;
    x = Zeidel(a, b, n);
    cout << "x: ";
    for (int i = 0; i < n; i++)
        cout << x[i] << " ";
    
}
/*
12.14 1.32 -0.78 -2.75
-0.89 16.75 1.88 -1.55
2.65 -1.27 -15.64 -0.64
2.44 1.52 1.93 -11.43
*/


#include <iostream>
using namespace std;
#include <vector>
#define _USE_MATH_DEFINES
#include <cmath>
#include <fstream>
const double PI = 2 * acos(0.0);
//double* gauss(double** a, double* y, int n)
//{
//	double* x, max;
//	int k, ind;
//	x = new double[n];
//	k = 0;
//	const long double eps = 0.00001;
//	//поиск строки с макс первым элементом
//	while (k < n) {
//		max = abs(a[k][k]);
//		ind = k;
//		for (int i = k + 1; i < n; i++) {
//			if (abs(a[i][k]) > max)
//			{
//				max = abs(a[i][k]);
//				ind = i;
//			}
//		}
//		//перестановка строк
//		for (int j = 0; j < n; j++)
//		{
//			double temp = a[k][j];
//			a[k][j] = a[ind][j];
//			a[ind][j] = temp;
//		}
//		double temp = y[k];
//		y[k] = y[ind];
//		y[ind] = temp;
//		//нормализация
//		for (int i = k; i < n; i++)
//		{
//			double temp = a[i][k];
//			if (abs(temp) <= eps) continue;
//			for (int j = k; j < n; j++)
//				a[i][j] = a[i][j] / temp;
//			y[i] = y[i] / temp;
//			if (i == k) continue;
//			for (int j = 0; j < n; j++)
//				a[i][j] = a[i][j] - a[k][j];
//			y[i] = y[i] - y[k];
//		}
//		k++;
//	}
//	//подстановка полученных значений в уравнения
//	for (k = n - 1; k >= 0; k--)
//	{
//		x[k] = y[k];
//		for (int i = 0; i < k; i++)
//			y[i] = y[i] - a[i][k] * x[k];
//	}
//	return x;
//}
vector<double> gauss(vector<vector<double>>& a, vector<double>& y) {
	int n = y.size(); // Размерность системы
	vector<double> x(n);  // Вектор решений
	double max;
	int k, ind;
	const long double eps = 0.00001;

	for (k = 0; k < n; ++k) {
		// Поиск строки с максимальным по модулю элементом в k-ом столбце
		max = abs(a[k][k]);
		ind = k;
		for (int i = k + 1; i < n; ++i) {
			if (abs(a[i][k]) > max) {
				max = abs(a[i][k]);
				ind = i;
			}
		}

		// Перестановка строк, если необходимо
		if (ind != k) {
			swap(a[k], a[ind]);
			swap(y[k], y[ind]);
		}

		// Прямой ход (приведение к верхнетреугольному виду)
		for (int i = k + 1; i < n; ++i) {
			double factor = a[i][k] / a[k][k];
			for (int j = k; j < n; ++j) {
				a[i][j] -= factor * a[k][j];
			}
			y[i] -= factor * y[k];
		}
	}

	// Обратный ход (нахождение решений)
	for (k = n - 1; k >= 0; --k) {
		x[k] = y[k];
		for (int i = k + 1; i < n; ++i) {
			x[k] -= a[k][i] * x[i];
		}
		x[k] /= a[k][k];
	}

	return x;
}

double inter_Lagr(vector<double>& x_v, vector<double>& y_v, double x, int n) {
	double result = 0;
	for (int i = 0; i < n; i++) {
		double y0 = y_v[i];
		for (int j = 0; j < n; j++) {
			if(i!=j)
				y0 *= ((x - x_v[j]) / (x_v[i] - x_v[j]));
		}
		result += y0;
	}
	return result;
}
vector<double> nodes(double a, double b, int num_nodes) {
	vector<double> nodes(num_nodes);
	double step = (b - a) / (num_nodes - 1);
	for (int i = 0; i < num_nodes; ++i) {
		nodes[i] = a + i * step;
	}
	return nodes;
}
vector<double> chebyshev_nodes(double start, double end, int num_nodes) {
	vector<double> nodes(num_nodes);
	for (int i = 0; i < num_nodes; ++i) {
		nodes[i] = 0.5 * (start + end) + 0.5 * (end - start) * cos(PI * (2 * i + 1) / (2 * num_nodes));
	}
	return nodes;
}
double f(double x) {
	return 1 / (1 + 25 * pow(x, 2));
}
double fp(double x) {
	return -50 * x / pow((1 + 25 * pow(x, 2)), 2);
}
double fpp(double x) {
	return (3750*pow(x,2)-50)/ pow((1 + 25 * pow(x, 2)), 3);
}
vector<double> s(double x, int p) {
	vector<double>res(4);
	if (p == 0) {
		res[0] = pow(x, 3);
		res[1] = pow(x, 2);
		res[2] = x;
		res[3] = 1;
		//res[4] = f(x);
		return res;
	}
	if (p == 1) {
		res[0] = 3 * pow(x, 2);
		res[1] = 2 * x;
		res[2] = 1;
		res[3] = 0;
		//res[4] = fp(x);
		return res;
	}
	if (p == 2) {
		res[0] = 6 * x;
		res[1] = 2;
		res[2] = 0;
		res[3] = 0;
		//res[4] = fpp(x);
		return res;
	}
}

void splain(int n, double start, double end) {
	vector<double>x_i = nodes(start, end, n);
	vector<double>k;
	vector<double>b(4);
	vector<vector<double>>matr(4);
	for (int i = 0; i < n-1; i++) {
		matr[0] = s(x_i[i],0);
		matr[1] = s(x_i[i + 1],0);
		matr[2] = s(x_i[i],1);
		matr[3] = s(x_i[i+1],1);
		b[0] = f(x_i[i]);
		b[1] = f(x_i[i + 1]);
		b[2] = fp(x_i[i]);
		b[3] = fp(x_i[i+1]);

		k = gauss(matr, b);
		//cout << k[0] << " " << k[1] << " " << k[2] << " " << k[3] << endl;
		for (double x = (2 / double(n - 1)) * i - 1; x <= (2 / double(n - 1)) * (i + 1) - 1; x += 0.1) {
			cout<<fixed << x << "   " << k[3] + k[2] * pow(x, 1) +
				k[1] * pow(x, 2) + k[0] * pow(x, 3) << endl;
		}
	}
}

int main() {
	setlocale(LC_ALL, "Ru");
	ofstream out("file.txt");
	double a = -1;
	double b = 1;
	int n = 11;
	vector<double> x1_v = nodes(a, b, n);
	vector<double> x2_v = chebyshev_nodes(a, b, n);
	vector<double> y1_v(n);
	vector<double> y2_v(n);
	for (int i = 0; i < n; i++) {
		y1_v[i] = f(x1_v[i]);
		y2_v[i] = f(x2_v[i]);
	}
	for (int i = 0; i < n; i++)
		cout << x1_v[i] << " ";
	cout << endl;
	for (int i = 0; i < n; i++)
		cout << y1_v[i] << " ";
	cout << endl;
	double fx2 = 0;
	cout << "значения исходной функции: " << endl;
	for (double i = -1; i <= 1; i+=0.1) {
		out << i << " " << f(i) << endl;
		cout << i << " " << f(i) << endl;
	}
	out << endl;
	double x = 0;
	double x_i = 0;
	cout << "ИП Лагранжа для равноотстоящих узлов: " << endl;
	for (double i = -1; i <= 1; i += 0.1) {
		//x = i;
		x_i = inter_Lagr(x1_v, y1_v,i, n);
		out << i << " " << x_i << endl;
		cout << i << " " << x_i << endl;
	}
	out << endl;
	cout << endl;
	cout << "ИП Лагранжа для чебышевских узлов: " << endl;
	for (double i = -1; i <= 1; i += 0.1) {
		//x = i;
		x_i = inter_Lagr(x2_v, y2_v, i, n);
		out << i << " " << x_i << endl;
		cout << i << " " << x_i << endl;
	}
	cout << "отклонение ИП от исходной функции для равноотсоящих узлов: " << endl;
	for (double i = -1; i <= 1; i += 0.1) {
		cout << i << " " << abs(f(i) - inter_Lagr(x1_v, y1_v, i, n)) << endl;
	}
	cout << "отклонение ИП от исходной функции для чебышевских узлов: " << endl;
	for (double i = -1; i <= 1; i += 0.1) {
		cout << i << " " << abs(f(i) - inter_Lagr(x2_v, y2_v, i, n)) << endl;
	}
	cout << endl;
	//сплайны
	splain(n,a, b);
	x1_v = { 2,3,5,7 };
	y1_v = { 4,-2,6,-3 };

}


#include <iostream>
using namespace std;
#include <vector>
#define _USE_MATH_DEFINES
#include <cmath>
#include <fstream>
const double PI = 2 * acos(0.0);
//double* gauss(double** a, double* y, int n)
//{
//	double* x, max;
//	int k, ind;
//	x = new double[n];
//	k = 0;
//	const long double eps = 0.00001;
//	//поиск строки с макс первым элементом
//	while (k < n) {
//		max = abs(a[k][k]);
//		ind = k;
//		for (int i = k + 1; i < n; i++) {
//			if (abs(a[i][k]) > max)
//			{
//				max = abs(a[i][k]);
//				ind = i;
//			}
//		}
//		//перестановка строк
//		for (int j = 0; j < n; j++)
//		{
//			double temp = a[k][j];
//			a[k][j] = a[ind][j];
//			a[ind][j] = temp;
//		}
//		double temp = y[k];
//		y[k] = y[ind];
//		y[ind] = temp;
//		//нормализация
//		for (int i = k; i < n; i++)
//		{
//			double temp = a[i][k];
//			if (abs(temp) <= eps) continue;
//			for (int j = k; j < n; j++)
//				a[i][j] = a[i][j] / temp;
//			y[i] = y[i] / temp;
//			if (i == k) continue;
//			for (int j = 0; j < n; j++)
//				a[i][j] = a[i][j] - a[k][j];
//			y[i] = y[i] - y[k];
//		}
//		k++;
//	}
//	//подстановка полученных значений в уравнения
//	for (k = n - 1; k >= 0; k--)
//	{
//		x[k] = y[k];
//		for (int i = 0; i < k; i++)
//			y[i] = y[i] - a[i][k] * x[k];
//	}
//	return x;
//}
vector<double> gauss(vector<vector<double>>& a, vector<double>& y) {
	int n = y.size(); // Размерность системы
	vector<double> x(n);  // Вектор решений
	double max;
	int k, ind;
	const long double eps = 0.00001;

	for (k = 0; k < n; ++k) {
		// Поиск строки с максимальным по модулю элементом в k-ом столбце
		max = abs(a[k][k]);
		ind = k;
		for (int i = k + 1; i < n; ++i) {
			if (abs(a[i][k]) > max) {
				max = abs(a[i][k]);
				ind = i;
			}
		}

		// Перестановка строк, если необходимо
		if (ind != k) {
			swap(a[k], a[ind]);
			swap(y[k], y[ind]);
		}

		// Прямой ход (приведение к верхнетреугольному виду)
		for (int i = k + 1; i < n; ++i) {
			double factor = a[i][k] / a[k][k];
			for (int j = k; j < n; ++j) {
				a[i][j] -= factor * a[k][j];
			}
			y[i] -= factor * y[k];
		}
	}

	// Обратный ход (нахождение решений)
	for (k = n - 1; k >= 0; --k) {
		x[k] = y[k];
		for (int i = k + 1; i < n; ++i) {
			x[k] -= a[k][i] * x[i];
		}
		x[k] /= a[k][k];
	}

	return x;
}

double inter_Lagr(vector<double>& x_v, vector<double>& y_v, double x, int n) {
	double result = 0;
	for (int i = 0; i < n; i++) {
		double y0 = y_v[i];
		for (int j = 0; j < n; j++) {
			if(i!=j)
				y0 *= ((x - x_v[j]) / (x_v[i] - x_v[j]));
		}
		result += y0;
	}
	return result;
}
vector<double> nodes(double a, double b, int num_nodes) {
	vector<double> nodes(num_nodes);
	double step = (b - a) / (num_nodes - 1);
	for (int i = 0; i < num_nodes; ++i) {
		nodes[i] = a + i * step;
	}
	return nodes;
}
vector<double> chebyshev_nodes(double start, double end, int num_nodes) {
	vector<double> nodes(num_nodes);
	for (int i = 0; i < num_nodes; ++i) {
		nodes[i] = 0.5 * (start + end) + 0.5 * (end - start) * cos(PI * (2 * i + 1) / (2 * num_nodes));
	}
	return nodes;
}
double f(double x) {
	return 1 / (1 + 25 * pow(x, 2));
}
double fp(double x) {
	return -50 * x / pow((1 + 25 * pow(x, 2)), 2);
}
double fpp(double x) {
	return (3750*pow(x,2)-50)/ pow((1 + 25 * pow(x, 2)), 3);
}
vector<double> s(double x, int p) {
	vector<double>res(4);
	if (p == 0) {
		res[0] = pow(x, 3);
		res[1] = pow(x, 2);
		res[2] = x;
		res[3] = 1;
		//res[4] = f(x);
		return res;
	}
	if (p == 1) {
		res[0] = 3 * pow(x, 2);
		res[1] = 2 * x;
		res[2] = 1;
		res[3] = 0;
		//res[4] = fp(x);
		return res;
	}
	if (p == 2) {
		res[0] = 6 * x;
		res[1] = 2;
		res[2] = 0;
		res[3] = 0;
		//res[4] = fpp(x);
		return res;
	}
}
double S(vector<double> x, vector<double> y, int A, int B, int n, double xx) {
	double h = (double)(B - A) / (n - 1);

	vector<double> c(n + 1);
	vector<double>k(n + 1);
	k[1] = 0;//граничное условие
	c[1] = 0;//граничное условие
	for (int i = 2; i < n; i++) { //решение трехдиагональной системы
		double a = x[i] - x[i - 1];
		double b = x[i - 1] - x[i - 2];
		double r = 2 * (a + b) - b * c[i - 1];
		c[i] = a / r;//вычисление коэффициента c
		k[i] = (3.0 * ((y[i] - y[i - 1]) / h - (y[i - 1] - y[i - 2]) / h) - h * k[i - 1]) / r;
		//вычисление коэффициента k
	}

	c[n] = k[n];//установка последнего коэффициента
	for (int i = n - 2; i >= 2; i--) {//обратный ход прогонки
		c[i] = k[i] - c[i] * c[i + 1];
	}

	int i = 0;
	while (xx >= x[i] && i != (n - 1)) { //определение интервала в который попадпет xx
		i++;
	}
	double j, a, b, q, r, p, d, p1, p2;
	j = i - 1;//индекс левой границы  интервала
	a = y[j];//значение функции в левой границе
	b = x[j];//x координата левой границы
	q = x[i] - b;//длина текущего интервала
	r = xx - b;//расстояние от xx до левой границы
	p = c[i];//вторая производная
	d = c[i + 1];//вторая производная следующего узла
	b = ((y[i] - a) / q) - ((d + 2 * p) * q / 3.0);//коэффициент b
	d = (d - p) / q * r;//коэффициент d
	p1 = b + r * (2 * p + d);//коэффициент p1
	p2 = 2 * (p + d);//коэффициент p2
	p = a + r * (b + r * (p + d / 3.0));//вычисление значения сплайна в точке xx

	return p;
}
void splain(int n, double start, double end) {
	vector<double>x_i = nodes(start, end, n);
	vector<double>k;
	vector<double>b(4);
	vector<vector<double>>matr(4);
	for (int i = 0; i < n-1; i++) {
		matr[0] = s(x_i[i],0);
		matr[1] = s(x_i[i + 1],0);
		matr[2] = s(x_i[i],1);
		matr[3] = s(x_i[i+1],1);
		b[0] = f(x_i[i]);
		b[1] = f(x_i[i + 1]);
		b[2] = fp(x_i[i]);
		b[3] = fp(x_i[i+1]);

		k = gauss(matr, b);
		//cout << k[0] << " " << k[1] << " " << k[2] << " " << k[3] << endl;
		for (double x = (2 / double(n - 1)) * i - 1; x <= (2 / double(n - 1)) * (i + 1) - 1; x += 0.1) {
			cout<<fixed << x << "   " << k[3] + k[2] * pow(x, 1) +
				k[1] * pow(x, 2) + k[0] * pow(x, 3) << endl;
		}
	}
}

int main() {
	setlocale(LC_ALL, "Ru");
	ofstream out("file.txt");
	double a = -1;
	double b = 1;
	int n = 21;
	vector<double> x1_v = nodes(a, b, n);
	vector<double> x2_v = chebyshev_nodes(a, b, n);
	vector<double> y1_v(n);
	vector<double> y2_v(n);
	for (int i = 0; i < n; i++) {
		y1_v[i] = f(x1_v[i]);
		y2_v[i] = f(x2_v[i]);
	}
	for (int i = 0; i < n; i++)
		cout << x1_v[i] << " ";
	cout << endl;
	for (int i = 0; i < n; i++)
		cout << y1_v[i] << " ";
	cout << endl;
	double fx2 = 0;
	cout << "значения исходной функции: " << endl;
	for (double i = -1; i <= 1; i+=0.1) {
		out << i << " " << f(i) << endl;
		cout << i << " " << f(i) << endl;
	}
	out << endl;
	double x = 0;
	double x_i = 0;
	cout << "ИП Лагранжа для равноотстоящих узлов: " << endl;
	for (double i = -1; i <= 1; i += 0.1) {
		//x = i;
		x_i = inter_Lagr(x1_v, y1_v,i, n);
		out << i << " " << x_i << endl;
		cout << i << " " << x_i << endl;
	}
	out << endl;
	cout << endl;
	cout << "ИП Лагранжа для чебышевских узлов: " << endl;
	for (double i = -1; i <= 1; i += 0.1) {
		//x = i;
		x_i = inter_Lagr(x2_v, y2_v, i, n);
		out << i << " " << x_i << endl;
		cout << i << " " << x_i << endl;
	}
	cout << "отклонение ИП от исходной функции для равноотсоящих узлов: " << endl;
	for (double i = -1; i <= 1; i += 0.1) {
		cout << i << " " << abs(f(i) - inter_Lagr(x1_v, y1_v, i, n)) << endl;
	}
	cout << "отклонение ИП от исходной функции для чебышевских узлов: " << endl;
	for (double i = -1; i <= 1; i += 0.1) {
		cout << i << " " << abs(f(i) - inter_Lagr(x2_v, y2_v, i, n)) << endl;
	}
	cout << endl;
	//сплайны
	splain(n,a, b);
	cout << endl;
	x1_v = { 2,3,5,7 };
	y1_v = { 4,-2,6,-3 };
	for (double i = 2; i <= 7; i += 0.2) {
		cout << i << " " << S(x1_v, y1_v, 2, 7, 4, i) << endl;
	}

}


#include <iostream>
using namespace std;
#include <vector>
//e = 0.0001;
//значения a b c округлить до 0.01
//double* gauss(double** a, double* y, int n)
//{
//	double* x, max;
//	int k, ind;
//	x = new double[n];
//	k = 0;
//	const long double eps = 0.00001;
//	//поиск строки с макс первым элементом
//	while (k < n) {
//		max = abs(a[k][k]);
//		ind = k;
//		for (int i = k + 1; i < n; i++) {
//			if (abs(a[i][k]) > max)
//			{
//				max = abs(a[i][k]);
//				ind = i;
//			}
//		}
//		//перестановка строк
//		for (int j = 0; j < n; j++)
//		{
//			double temp = a[k][j];
//			a[k][j] = a[ind][j];
//			a[ind][j] = temp;
//		}
//		double temp = y[k];
//		y[k] = y[ind];
//		y[ind] = temp;
//		//нормализация
//		for (int i = k; i < n; i++)
//		{
//			double temp = a[i][k];
//			if (abs(temp) <= eps) continue;
//			for (int j = k; j < n; j++)
//				a[i][j] = a[i][j] / temp;
//			y[i] = y[i] / temp;
//			if (i == k) continue;
//			for (int j = 0; j < n; j++)
//				a[i][j] = a[i][j] - a[k][j];
//			y[i] = y[i] - y[k];
//		}
//		k++;
//	}
//	//подстановка полученных значений в уравнения
//	for (k = n - 1; k >= 0; k--)
//	{
//		x[k] = y[k];
//		for (int i = 0; i < k; i++)
//			y[i] = y[i] - a[i][k] * x[k];
//	}
//	return x;
//}
vector<double> gauss(vector<vector<double>>& a, vector<double>& y) {
	int n = y.size(); // Размерность системы
	vector<double> x(n);  // Вектор решений
	double max;
	int k, ind;
	const long double eps = 0.0001;

	for (k = 0; k < n; ++k) {
		// Поиск строки с максимальным по модулю элементом в k-ом столбце
		max = abs(a[k][k]);
		ind = k;
		for (int i = k + 1; i < n; ++i) {
			if (abs(a[i][k]) > max) {
				max = abs(a[i][k]);
				ind = i;
			}
		}

		// Перестановка строк, если необходимо
		if (ind != k) {
			swap(a[k], a[ind]);
			swap(y[k], y[ind]);
		}

		// Прямой ход (приведение к верхнетреугольному виду)
		for (int i = k + 1; i < n; ++i) {
			double factor = a[i][k] / a[k][k];
			for (int j = k; j < n; ++j) {
				a[i][j] -= factor * a[k][j];
			}
			y[i] -= factor * y[k];
		}
	}

	// Обратный ход (нахождение решений)
	for (k = n - 1; k >= 0; --k) {
		x[k] = y[k];
		for (int i = k + 1; i < n; ++i) {
			x[k] -= a[k][i] * x[i];
		}
		x[k] /= a[k][k];
	}

	return x;
}


vector<double>x = { 1,2,3,4,5,6 };
vector<double>y = { 1,1.5,3,4.5,7,8.5 };
double sumx(vector<double>x) {
	double s = 0;
	for (int i = 0; i < x.size(); i++)
		s += x[i];
	return s;
}
double sumy(vector<double>y) {
	double s = 0;
	for (int i = 0; i < x.size(); i++)
		s += y[i];
	return s;
}
double q(vector<double>x) {
	double s = 0;
	for (int i = 0; i < x.size(); i++)
		s += pow(x[i], 2);
	return s;
}
double xy(vector<double>x, vector<double>y) {
	double s = 0;
	for (int i = 0; i < x.size(); i++)
		s += x[i] * y[i];
	return s;
}

double sumxLN(vector<double>x) {
	double s = 0;
	for (int i = 0; i < x.size(); i++)
		s += log(x[i]);
	return s;
}
double sumyLN(vector<double>y) {
	double s = 0;
	for (int i = 0; i < x.size(); i++)
		s += log(y[i]);
	return s;
}
double qLN(vector<double>x) {
	double s = 0;
	for (int i = 0; i < x.size(); i++)
		s += log(pow(x[i], 2));
	return s;
}
double xyLN(vector<double>x, vector<double>y) {
	double s = 0;
	for (int i = 0; i < x.size(); i++)
		s += log(x[i] * y[i]);
	return s;
}

vector<vector<double>> matrix1 = { {q(x),sumx(x)},{sumx(x),(double)x.size()} };
vector<double>b = { 117, 25.5 };
vector<vector<double>> matrix2 = { {q(x),sumx(x)},{sumx(x),(double)x.size()} };

int main() {

	vector<double>res = gauss(matrix1, b);
	for (int i = 0; i < res.size(); i++)
		cout << res[i] << " ";

}
