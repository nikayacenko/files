#include <iostream>
#include <vector>
#include <fstream>
using namespace std;
int select(vector<int>& v) {
	int n = v.size();
	int op = 0;
	int mn = 0, temp=0;
	for (int i = 0; i < n-1; i++) {
		mn = i;
		op++;
		for (int j = i + 1; j < n; j++) {
			if (v[j] < v[mn]) { 
				mn = j; 
				op += 1;
			}
			if (i != mn) {
				temp = v[i];
				v[i] = v[mn];
				v[mn] = temp;
				op += 3;
			}
			op+=2;
		}
	}
	return op;
}
int main() {
	int res[10];
	ofstream fout("file.txt");
	for (int n = 100, k=0; n <= 1000; n += 100, k++) {
		vector<int> mas;
		mas.resize(n);
		for (int i = 0, j=n; i < n; i++, j--){
			//mas[i] = rand() % 100;
			mas[i] = j;
		}
		//res[k] = select(mas);
		fout << n << " " << select(mas) << endl;
		
	}
	/*for (int i = 0; i < 10; i++)
		fout << res[i] << endl;*/
}



#include <iostream>
using namespace std;
#include <vector>
#include <fstream>
#include <string>
int op = 0;
void Quick(int* mas, int first, int last) {
	int mid, temp;
	int f = first, l = last;
	mid = mas[(f + l) / 2];
	op += 5;
	do {
		if (mas[f] >= mid)
			op++;
		while (mas[f] < mid) { 
			f++;
			op += 2;
		}
		if (mas[f] <= mid)
			op++;
		while (mas[l] > mid) {
			l--;
			op += 2;
		}
		op++;
		if (f <= l) {
			temp = mas[f];
			mas[f] = mas[l];
			mas[l] = temp;
			f++;
			l--;
			op += 5;
		}
		op++;
	}while (f < l);
	op++;
	if (first < l) Quick(mas, first, l);
	op++;
	if (f < last) Quick(mas, f, last);
}
int main()
{
	srand(time(0));
	vector<double>res(100);
	ofstream result("file.txt");
	for (int n = 100,g=0; n <= 10000; n += 100,g++) {
		for (int k = 0; k < 1000; k++) {
			int* mas = new int[n];
			for (int i = 0; i < n; i++) {
				mas[i] = rand() % 1001;
			}
			Quick(mas, 0, n - 1);
			op = 0;
			Quick(mas, 0, n - 1);
			res[g] += op;
		}
		result<<n<<" "<<fixed<<to_string(res[g]/1000)<<endl;
	}
}


#include <iostream>
#include <fstream>
#include <algorithm>
#include <string>
#include <vector>
using namespace std;
const int base = 16;
int convert(char c) {
	if (isdigit(c)) {
		return c - '0';
	}
	else if (isupper(c)) {
		return c - 'A' + 10;
	}
	else if (islower(c)) {
		return c - 'a' + 36;
	}
}
char invert(int c) {
	if (c >= 0 && c <= 9)
		return c + '0';
	else if (c >= 10 && c <= 35)
		return c - 10 + 'A';
	else if (c >= 36 && c <= 61)
		return c - 36 + 'a';
}
string plusZero(string n, int l) {
	while (n.length() < l) {
		n = '0' + n;
	}
	return n;
}
string add(string num1, string num2) {
	int maxLength = max(num1.length(), num2.length());
	num1 = plusZero(num1, maxLength);
	num2 = plusZero(num2, maxLength);
	string result = "";
	int carry = 0;
	for (int i = maxLength - 1; i >= 0; i--) {
		int digit1 = convert(num1[i]);
		int digit2 = convert(num2[i]);
		int sum = digit1 + digit2 + carry;
		carry = sum / base;
		result = invert(sum % base) + result;
	}
	if (carry > 0) {
		result = invert(carry) + result;
	}
	return result;
}
string sub(string num1, string num2) {
	int maxLength = max(num1.length(), num2.length());
	num1 = plusZero(num1, maxLength);
	num2 = plusZero(num2, maxLength);
	string result = "";
	int carry = 0;
	for (int i = maxLength - 1; i >= 0; i--) {
		int digit1 = convert(num1[i]);
		int digit2 = convert(num2[i]);
		int dif = digit1 - digit2 - carry;
		if (dif < 0) {
			carry = 1;
			dif += base;
		}
		else {
			carry = 0;
		}
		result = invert(dif) + result;
		size_t z = result.find_first_not_of('0');
		if (z == string::npos) {
			return "0";
		}
		else {
			return result.substr(z);
		}
	}
}
string sh(string num) {
	return num + '0';
}
int main()
{
	string s1, s2;
	cin >> s1;
	cin >> s2;
	cout << add(s1, s2)<<endl;
	cout << sub(s1, s2) << endl;
	
}

